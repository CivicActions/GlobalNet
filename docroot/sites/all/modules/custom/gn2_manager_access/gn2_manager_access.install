<?php
/**
 * @file
 * Install file for gn2_manager_access.
 */

/**
 * Implements hook_schema().
 */
function gn2_manager_access_schema() {
  $schema['gn2_manager_manage'] = array(
    'description' => 'A table for adding managers',
    'fields' => array(
      'mid' => array(
        'description' => 'The primary identifier for the transaction',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The manager user ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'gid' => array(
        'description' => 'The primary identifier for the group.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'role' => array(
        'description' => 'The role which we added to the user.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'member' => array(
        'description' => 'Boolean indicating whether the user was already a member.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the user is still a manager.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'enabled' => array(
        'description' => 'The Unix timestamp when the manager status was enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'disabled' => array(
        'description' => 'The Unix timestamp when the manager status was disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
      'disabled' => array('disabled'),
      'gid' => array('gid'),
      'uid' => array('uid'),
    ),
    'primary key' => array('mid'),
  );

  return $schema;
}

/**
 * Rebuilds node access.
 */
function gn2_manager_access_update_7001() {
  node_access_rebuild(TRUE);
}

/**
 * Rebuild node access; see RD-2769.
 */
function gn2_manager_access_update_7002() {
  node_access_rebuild(TRUE);
}

/**
 * Adding Manage table; @see RD-3250.
 */
function gn2_manager_access_update_7003() {
  $schema['gn2_manager_manage'] = array(
    'description' => 'A table for adding managers',
    'fields' => array(
      'mid' => array(
        'description' => 'The primary identifier for the transaction',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The manager user ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'gid' => array(
        'description' => 'The primary identifier for the group.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'role' => array(
        'description' => 'The role ID which we added to the user.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'member' => array(
        'description' => 'Boolean indicating whether the user was already a member.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the user is still a manager.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'enabled' => array(
        'description' => 'The Unix timestamp when the manager status was enabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'disabled' => array(
        'description' => 'The Unix timestamp when the manager status was disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'enabled' => array('enabled'),
      'status' => array('status'),
      'gid' => array('gid'),
      'uid' => array('uid'),
    ),
    'primary key' => array('mid'),
  );

  db_create_table('gn2_manager_manage', $schema['gn2_manager_manage']);
}

/**
 * Update the field_children_groups field; @see RD-3256.
 */
//function gn2_manager_access_update_7004(&$sandbox) {
//  $ret = array();
//
//  // Use the sandbox at your convenience to store the information needed
//  // to track progression between successive calls to the function.
//  $group_types = array(
//    'alumni_group',
//    'coi',
//    'course',
//    'course_group',
//    'program',
//    'event',
//    'group',
//  );
//  if (!isset($sandbox['progress'])) {
//    // The count of nodes visited so far.
//    $sandbox['progress'] = 0;
//    // Total nodes that must be visited.
//    $sandbox['max'] = db_query('SELECT COUNT(nid) FROM {node} WHERE type IN (:types)',
//        array(':types' => $group_types))->fetchField();
//    // A place to store messages during the run.
//    $sandbox['messages'] = array();
//    // Last node read via the query.
//    $sandbox['current_node'] = 0;
//  }
//
//  // Process nodes by groups of 10 (arbitrary value).
//  // When a group is processed, the batch update engine determines
//  // whether it should continue processing in the same request or provide
//  // progress feedback to the user and wait for the next request.
//  $limit = 50;
//
//  // Retrieve the next group of nids.
//  $query = db_select('node', 'n');
//  $query->fields('n', array('nid'));
//  $query->orderBy('n.nid', 'DESC');
//  if ($sandbox['current_node']) {
//    $query->condition('n.nid', $sandbox['current_node'], '<');
//  }
//  $query->condition('n.type', $group_types, 'IN');
//  $query->extend('PagerDefault');
//  $query->range(0, $limit);
//  $result = $query->execute()->fetchCol();
//  $nids = array();
//  foreach ($result as $row) {
//    // Here we actually perform a dummy 'update' on the current node.
//    $node = node_load($row);
//    node_save($node);
//
//    // Update our progress information.
//    $sandbox['progress']++;
//    $sandbox['current_node'] = $row;
//    $nids[] = $row;
//  }
//
//  // Set the "finished" status, to tell batch engine whether this function
//  // needs to run again. If you set a float, this will indicate the progress
//  // of the batch so the progress bar will update.
//  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);
//
//  // Set up a per-run message; Make a copy of $sandbox so we can change it.
//  // This is simply a debugging stanza to illustrate how to capture status
//  // from each pass through hook_update_N().
//  $sandbox_status = $sandbox;
//  // Don't want them in the output.
//  unset($sandbox_status['messages']);
//  $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);
//
//  if ($sandbox['#finished']) {
//    $nids = (!empty($nids)) ? implode(', ', $nids) : NULL;
//    return t('Updated: !nids', array('!nids' => $nids));
//  }
//}
