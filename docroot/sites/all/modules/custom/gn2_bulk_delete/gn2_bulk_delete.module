<?php

/**
 * The GN2 Bulk Delete provides an interface for bulk deleting Folder files.
 */

/**
 * Implements hook_menu().
 */
function gn2_bulk_delete_menu() {
  $items = array();

  $items['admin/config/media/bulk-delete'] = array(
    'title' => 'GlobalNET Bulk Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gn2_bulk_delete_admin_form'),
    'access arguments' => array('administer nodes'),
    'weight' => 2,
    'file' => 'gn2_bulk_delete.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/bulk-delete'] = array(
    'title' => 'Bulk Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gn2_bulk_delete_form', 1),
    'access callback' => 'gn2_bulk_delete_access',
    'access arguments' => array(1),
    'menu_name' => 'navigation',
    'weight' => 2,
    'file' => 'gn2_bulk_delete.form.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/bulk-delete/confirm/%'] = array(
    'title' => 'Bulk Delete',
    'title callback' => 'gn2_bulk_delete_confirm_title',
    'title arguments' => array(1),
    'page callback' => 'gn2_bulk_delete_confirm_page',
    'page arguments' => array(1, 4),
    'access callback' => 'gn2_bulk_delete_access',
    'access arguments' => array(1),
    'file' => 'gn2_bulk_delete.confirm.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Access callback for GN2 Bulk Delete.
 *
 * @param object $node.
 */
function gn2_bulk_delete_access($node) {
  global $user;
  // Hide tab for all but, Folders.
  if ($node->type !== 'media_gallery') {
    return FALSE;
  }
  // Allow access for Administrators.
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  // Only show for Folder content type.
  if ($node->type === 'media_gallery') {
    // Check if the user is a Group Manager for this Folder.
    $group = field_get_items('node', $node, 'og_group_ref');
    $gid = $group[0]['target_id'];
    $group_role = og_get_user_roles('node', $gid);
    // Check if the user is an Org Manager for this org.
    $parent = field_get_items('node', $node, 'field_parent_organization');
    $pid = $parent[0]['target_id'];
    $org_role = ($pid) ? og_get_user_roles('node', $pid) : array();
    return (in_array('org_manager', $org_role) || in_array('group_manager', $group_role))
      ? TRUE : FALSE;
  }
  // Otherwise, deny access.
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function gn2_bulk_delete_theme($existing, $type, $theme, $path) {
  return array(
    'gn2_bulk_delete_table_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Form table theming function.
 *
 * @param array $form
 *   The form array.
 */
function theme_gn2_bulk_delete_table_form(&$variables) {
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];

  $content = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );

  // Format our tables rows.
  foreach (element_children($rows) as $row_index) {
    $row = array();
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element.
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    // Add the row to the table.
    $content['#rows'][] = $row;
  }

  // Redner the table and return.
  return drupal_render($content);
}

/**
 * Gets the files for a given deletion request.
 *
 * @param int $did
 *   The bulk delete ID.
 */
function _gn2_bulk_delete_get_files($did) {
  $request_data['info'] = db_query('SELECT * FROM {bulk_delete} WHERE did = :did', array(':did' => $did))->fetchAssoc();
  $request_data['files'] = db_query('SELECT fid FROM {bulk_delete_files} WHERE did = :did', array(':did' => $did))->fetchCol();
  return $request_data;
}

/**
 * Get the submitters data for a bulk deletion request.
 *
 * @param int $did
 *   The deletion ID.
 *
 * @return mixed array|FALSE
 *   Returns the user data and creation date for a given deletion request.
 */
function _gn2_bulk_delete_get_request_data($did) {
  $query = db_select('bulk_delete', 'bd');
  $query->fields('bd', ['uid', 'date']);
  $query->join('users', 'u', 'u.uid = bd.uid');
  $query->addField('u', 'name', 'username');
  $query->join('field_data_field_name_first', 'f', 'f.revision_id = u.vid');
  $query->addField('f', 'field_name_first_value', 'first_name');
  $query->join('field_data_field_name_last', 'l', 'l.revision_id = u.vid');
  $query->addField('l', 'field_name_last_value', 'last_name');
  $query->condition('bd.did', $did);
  $request_data = $query->execute()->fetchAssoc();
  return $request_data;
}

/**
 * Get the email addresses for all admin users.
 */
function _gn2_bulk_delete_get_admins() {
  $query = db_select('users', 'u');
  $query->fields('u', array('mail', 'name'));
  $query->join('users_roles', 'ur', 'ur.uid = u.uid');
  $query->join('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $query->orderBy('u.name', 'ASC');
  $admins = $query->execute()->fetchAll();

  foreach ($admins as $admin_users) {
    $options[$admin_users->name . ' <' . $admin_users->mail . '>'] = $admin_users->name;
  }
  return $options;
}

/**
 * Implements hook_views_query_alter().
 */
function gn2_bulk_delete_views_query_alter(&$view, &$query) {
  if ($view->name === 'folder_bulk_delete' && filter_input(INPUT_GET, 'did')) {
    $did = filter_input(INPUT_GET, 'did');
    $sub_query = db_select('bulk_delete_files', 'b')
      ->fields('b', ['fid'])
      ->condition('b.did', $did);
    $view->query->add_where(1, 'field_data_media_gallery_file.media_gallery_file_fid', $sub_query, 'IN');
  }
}

/**
 * Implements hook_views_pre_view().
 */
function gn2_bulk_delete_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name === 'folder_bulk_delete' && $did = filter_input(INPUT_GET, 'did')) {
    $request_data = _gn2_bulk_delete_get_request_data($did);
    if ($request_data) {
      $name = (isset($request_data['first_name']) && $request_data['last_name'])
        ? $request_data['first_name'] . ' ' . $request_data['last_name']
        : $request_data['username'];
      $user_link = l($name, 'user/' . $request_data['uid']);
      $date = format_date($request_data['date'], 'custom', 'd F, Y');
      $message = t('!name requested that the following files be deleted on !date. Check the checkbox next to the file, or the checkbox at the top of the list to select all files, then choose <b>Delete items</b> from the Operations menu and click <b>Execute</b>.',
        [
          '!name' => $user_link,
          '!date' => $date,
        ]);

      // Add the message to the View header.
      $item = array(
        'id' => 'area',
        'table' => 'views',
        'field' => 'area',
        'relationship' => 'none',
        'group_type' => 'group',
        'ui_name' => '',
        'label' => '',
        'empty' => 0,
        'content' => $message,
        'format' => 'filtered_html',
        'tokenize' => 0,
      );
      // Render the header.
      $view->set_item($display_id, 'header', 'area', $item);
    }
  }
}
