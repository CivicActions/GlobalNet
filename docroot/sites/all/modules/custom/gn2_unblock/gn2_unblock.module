<?php
/**
 * @file
 * The GlobalNET Unblock module provides functions for unblocking users.
 */

/**
 * Implements hook_user_login().
 */
function gn2_unblock_user_login(&$edit, $account) {
  // On successful login remove any temporary protection for the IP address
  // and the username.
  $uid = $account->uid;
  $host = ip_address();
  $identifier = $uid . '-' . $host;
  if (isset($_SESSION['messages'])) {
    unset($_SESSION['messages']);
  }
  _gn2_unblock_remove_events($account, $host, $identifier);
}

/**
 * Implements hook_user_update().
 */
function gn2_unblock_user_update(&$edit, $account, $category) {
  // The update case can be launched by the user or by any administrator.
  // On update, remove only the user information tracked.
  if (isset($edit['status']) && $edit['status'] != 0) {
    $host = ip_address();
    // Don't remove tracking events if account is blocked.
    _gn2_unblock_remove_events($account, $host);
  }
}

/**
 * Implements hook_form_alter().
 */
function gn2_unblock_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $validate = array('gn2_unblock_set_login_timestamp', 'gn2_unblock_count_attemps');
      if (isset($form['#validate']) && is_array($form['#validate'])) {
        $form['#validate'] = array_merge($form['#validate'], $validate);
      }
      else {
        $form['#validate'] = $validate;
      }
      break;
  }
}

/**
 * Form validation handler where we save the login event information.
 */
function gn2_unblock_set_login_timestamp($form, $form_state) {
  $pass = trim($form_state['values']['pass']);
  // Don't record a login attempt with no password or username.
  if (strlen($pass) == 0 || empty($form_state['values']['name'])) {
    return;
  }

  // Create the unique id from the User ID and IP or just from the IP.
  $host = ip_address();
  $uname = $form_state['values']['name'];
  $uid = gn2_unlock_get_user_id($uname);
  $unblock_id = (isset($uid)) ? $uid . '-' . $host : $host;

  $identifier = (isset($form_state['flood_control_user_identifier'])) ?
    $form_state['flood_control_user_identifier'] : $unblock_id;
  // Save entry in security log, Username, IP Address and Flood identifier.
  _gn2_unblock_add_event(check_plain($uname), check_plain($host), check_plain($identifier));
}

/**
 * Form validation handler where we count the login attempts.
 */
function gn2_unblock_count_attemps($form, $form_state) {
  $pass = trim($form_state['values']['pass']);
  // Don't record a login attempt with no password or username.
  if (strlen($pass) == 0 || empty($form_state['values']['name'])) {
    return;
  }
  $host = ip_address();
  $uname = $form_state['values']['name'];
  $uid = gn2_unlock_get_user_id($uname);
  $unblock_id = (isset($uid)) ? $uid . '-' . $host : $host;
  $identifier = (isset($form_state['flood_control_user_identifier'])) ?
    $form_state['flood_control_user_identifier'] : $unblock_id;
  
  $count = gn2_unlock_get_count($identifier);
  $counter = ($count) ? $count : 1;
  $limit = variable_get('user_failed_login_user_limit', 3);
  if ($counter < $limit) {
    $remaining = $limit - $counter;
    $tries = format_plural($remaining, 'attempt', 'attempts');
    drupal_set_message(t('You have @remaining @tries remaining before your account is temporarily blocked.',
        array(
          '@remaining' => $remaining,
          '@tries' => $tries,
        )), 'error', FALSE);
  }
  else {
    $link = l(t('Try again later or request a new password'), 'user/password');
    $support_link = l(t('Help page'), 'guide/Access-denied/678');
    if (isset($_SESSION['messages'])) {
      unset($_SESSION['messages']);
    }
    drupal_set_message(t('Sorry, there have been more than !limit failed login attempts for this account. It is temporarily blocked for 15 minutes. !link or check the !support for information pertaining to Access Denied messages.',
        array('!limit' => $limit, '!link' => $link, '!support' => $support_link)), 'error', FALSE);
  }
}

/**
 * Save the login attempt in the tracking database: user name nd ip address.
 *
 * @param string $name
 *   User name to be tracked.
 * @param string $host
 *   IP Address of the pair.
 * @param string $identifier
 *   Flood identifier of the pair.
 */
function _gn2_unblock_add_event($name, $host, $identifier) {
  // Each attempt is kept for future minning of advanced bruteforcing like
  // multiple IP or X-Forwarded-for usage and automated track data cleanup.
  $event = array(
    'host' => $host,
    'name' => $name,
    'timestamp' => time(),
    'identifier' => $identifier,
  );
  db_insert('gn2_unblock_track')->fields($event)->execute();
}

/**
 * Remove tracked events or expire old ones.
 *
 * @param string $account
 *   The user object which to clear.
 * @param string $host
 *   if specified, IP Address of the name-ip pair to be removed.
 * @param string $identifier
 *   if specified, the Flood identifier.
 */
function _gn2_unblock_remove_events($account = NULL, $host = NULL, $identifier = NULL) {
  // Remove selected events.
  if (!empty($account)) {
    if (empty($identifier)) {
      $identifier = db_query('SELECT identifier FROM {gn2_unblock_track} WHERE name = :name',
              array(':name' => $account->name))->fetchField();
    }
    if ($identifier) {
      db_query('DELETE FROM {gn2_unblock_track} WHERE name = :name AND identifier = :identifier',
              array(
                ':name' => $account->name,
                ':identifier' => $identifier,
              ));
      db_query('DELETE FROM {flood} WHERE event = :event AND identifier = :identifier',
              array(':event' => 'failed_login_attempt_user', ':identifier' => $identifier));
    }
    db_query('DELETE FROM {flood} WHERE identifier = :id'
        . ' OR identifier = :ip', array(':id' => $account->uid . '-' . $host, ':ip' => $host));
    db_query('DELETE FROM {gn2_unblock_track} WHERE identifier = :id'
        . ' OR identifier = :ip', array(':id' => $account->uid . '-' . $host, ':ip' => $host));
  }
  else {
    // Calculate protection time window and remove expired events.
    $time = time() - (variable_get('user_failed_login_ip_window', 3600));
    _gn2_unlock_remove_all_events($time);
  }
}

/**
 * Remove all tracked events up to a date.
 *
 * @param int $time
 *   If specified, events up to this timestamp will be deleted.
 *   If not specified, all elements up to current timestamp will be deleted.
 */
function _gn2_unlock_remove_all_events($time = NULL) {
  // Remove selected events.
  if (empty($time)) {
    $time = time();
  }
  db_query("DELETE FROM {gn2_unblock_track} WHERE timestamp < :time", array(':time' => $time));
}

/**
 * Query for the number of login attempts.
 *
 * @param string $identifier
 *   The Flood identifier that is attempting to log in.
 *
 * @return int
 *   Returns the number of attemps.
 */
function gn2_unlock_get_count($identifier) {
  $count = db_query('SELECT COUNT(id) FROM {gn2_unblock_track} WHERE identifier = :identifier', array(':identifier' => $identifier))->fetchField();
  return $count;
}

/**
 * Get the User ID based on the username.
 *
 * @param string $name
 *   The username with which the user tried to log in.
 *
 * @return int
 *   Return the User ID or NULL.
 */
function gn2_unlock_get_user_id($name) {
  $uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $name))->fetchField();
  return $uid;
}
