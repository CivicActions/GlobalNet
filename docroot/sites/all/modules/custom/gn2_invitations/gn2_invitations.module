<?php
/**
 * @file
 * Code for the gn2_base_invitations module.
 */

variable_set('og_invite_send_invitation_by_rules', 1);

/**
 * Implements hook_menu().
 */
function gn2_invitations_menu() {
  $items['get-all-groups'] = array(
    'page callback' => '_gn2_invitations_get_all_groups',
    'access arguments' => array('view own private files'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function gn2_invitations_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == '_og_invite_form') {
    $invitation_types = array(
      'individual' => t('Select individual members to invite'),
      'email' => t('Invite users by email'),
    );
    // This field is needed to select how the invitation will be sent.
    $form['invitation_type'] = array(
      '#type' => 'radios',
      '#options' => $invitation_types,
      '#weight' => -10,
      '#description' => t('Please choose how the invitation will be sent.'),
    );
    // This field will be used to send invites to users via email.
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('By email'),
      '#weight' => -1,
      '#description' => t('Invite an user by email address.'),
    );

    $form['#submit'][] = '_gn2_invitations_process_invitations';
    $form['#submit'][] = '_gn2_invitations_invitees_notification';
    $form['invitee']['#required'] = FALSE;
  }
}

/**
 * Detects the invitation type and process the invitation(s).
 */
function _gn2_invitations_process_invitations($form, &$form_state) {
  $invitation_type = $form_state['input']['invitation_type'];
  if ($invitation_type === 'email') {
    $emails = $form_state['input']['email'];
    $form_state['group_invitees'] = _gn2_invitations_get_email_invitees($emails);
  }
}

/**
 * Invite people via email.
 */
function _gn2_invitations_get_email_invitees($emails) {
  $emails = explode(',', $emails);
  $invitees = '';

  if (!empty($emails)) {
    foreach ($emails as $email) {
      $user = user_load_by_mail($email);
      if ($user) {
        $invitees .= $user->name . ' [' . $user->uid . '], ';
      }
      else {
        drupal_set_message($email . ' ' . t("doesn't belong to any user"), 'warning');
      }
    }
  }

  return $invitees;
}

/**
 * Invite all group members.
 */
function _gn2_invitations_get_all_group_members($group) {
  $invitees = '';
  preg_match_all('/\[([A-Za-z0-9 ]+?)\]/', $group, $result);
  $group_id = $result[1][0];
  $group_node = node_load($group_id);
  $group_members = og_get_group_members_properties($group_node, array(), 'members', 'node');

  if (!empty($group_members)) {
    // Add group members to invitee field.
    foreach ($group_members as $member) {
      $user = user_load($member);
      $invitees .= $user->name . ' [' . $user->uid . '], ';
    }
  }

  return $invitees;
}

/**
 * Runs when the batch processing is complete.
 */
function _gn2_invitations_import_finished() {
  drupal_set_message(t('Invitations were sent successfully.'));
}

/**
 * Runs the batch processing and creates nodes with then given information.
 */
function _gn2_invitations_import_batch_processing($data, $gid) {
  $row = explode(',', $data[0]);
  $user = user_load_by_mail($row[2]);
  if ($user) {
    _gn2_invitations_send_invitation($user->name, $user->uid, $gid);
  }
}

/**
 * Get all group names for autocomplete.
 */
function _gn2_invitations_get_all_groups($string) {
  $result = db_query(
              "SELECT n.nid, n.title FROM node n WHERE type = 'group' AND title LIKE '%$string%' LIMIT 10"
            )->fetchAll();;
  $nids = array();
  foreach ($result as $group) {
    $nids[$group->title . ' [' . $group->nid . ']'] = $group->title;
  }
  $nids = drupal_json_output($nids);

  return $nids;
}

/**
 * Helper function to create invite notifications when the form is submited.
 */
function _gn2_invitations_invitees_notification($form, &$form_state) {
  $group_type = $form_state['values']['group_type'];
  $gid = $form_state['values']['gid'];

  if (isset($form_state['group_invitees'])) {
    // Name is not appearing.
    $invitees = explode(',', str_replace(', ', ',', $form_state['group_invitees']));
    array_pop($invitees);
  }
  else {
    $invitees = explode(',', str_replace(', ', ',', $form_state['values']['invitee']));
  }

  $entity = entity_load_single($group_type, $gid);

  foreach ($invitees as $invitee) {
    if (empty($invitee)) {
      continue;
    }
    list($name, $uid) = explode('||', preg_replace('#^(.*)\s\[([0-9]+)\]$#', '$1||$2', $invitee));
    if (isset($form_state['register_all'])) {
      _gn2_invitations_register_to_event($name, $uid, $gid);
    }
    else {
      _gn2_invitations_send_invitation($name, $uid, $gid);
    }
  }
}

/**
 * Helper function to register users to events.
 */
function _gn2_invitations_register_to_event($name, $uid, $gid) {
  $account = user_load($uid);
  og_group('node', $gid, array(
    "entity type" => "user",
    "entity" => $account,
  ));
  drupal_set_message(l($name, 'user/' . $uid) . " joined the event.");
}


/**
 * Helper function to add an user with a pending membership.
 */
function _gn2_invitations_add_pending_membership($uid, $gid) {
  $account = user_load($uid);
  $membership = og_group('node', $gid, array(
              "entity type" => "user",
              "entity" => $account,
              "state" => OG_STATE_PENDING,
  ));

  return $membership;
}

/**
 * Helper function to create invite notifications.
 */
function _gn2_invitations_send_invitation($name, $uid, $gid) {
  global $user;
  $data = db_select('og_membership', 'n')
    ->fields('n', array('id'))
    ->condition('gid', $gid, '=')
    ->condition('entity_type', 'user')
    ->condition('group_type', 'node')
    ->execute()
    ->fetchAll();

  if ($data) {
    $id = $data[0]->id;
    _gn2_invitations_add_pending_membership($uid, $gid);

    // Preparing membership objetct.
    $og_membership = og_membership_load($id);
    $og_membership->og_membership_invitation['und'][0]['value'] = 1;
    $og_membership->state = 2;
    og_membership_save($og_membership);

    // Creating hash and invite link.
    $hash = og_invite_generate_hash($og_membership);
    $answer_link = url(og_invite_answer_path_by_hash('node', $gid, $hash, 'answer'));

    _gn2_base_config_subscribe_member_get_notification($gid, $uid);

    db_merge('subscriptions_notifications_count')
      ->key(array('uid' => $uid))
      ->expression('count', 'count + 1')
      ->fields(array(
          'uid' => $uid,
        )
      )
      ->execute();

    db_insert('subscriptions_notifications_messages')
      ->fields(array(
        'uid' => $uid,
        'initiator' => $user->uid,
        'type' => 'Group invitation',
        'nid' => $gid,
        'text' => l(t('Click to answer'), $answer_link),
        'timestamp' => time(),
        )
      )
      ->execute();

    drupal_set_message(l($name, 'user/' . $uid) . " was invited successfully");
  }
}
